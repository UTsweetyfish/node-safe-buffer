Description: replace Buffer() by Buffer.from() or Buffer.alloc()
Author: Xavier Guimard <yadd@debian.org>
Forwarded: no
Last-Update: 2020-03-01

--- a/test/basic.js
+++ b/test/basic.js
@@ -4,11 +4,11 @@
 var SafeBuffer = require('../').Buffer
 
 test('new SafeBuffer(value) works just like Buffer', function (t) {
-  t.deepEqual(new SafeBuffer('hey'), new Buffer('hey'))
-  t.deepEqual(new SafeBuffer('hey', 'utf8'), new Buffer('hey', 'utf8'))
-  t.deepEqual(new SafeBuffer('686579', 'hex'), new Buffer('686579', 'hex'))
-  t.deepEqual(new SafeBuffer([1, 2, 3]), new Buffer([1, 2, 3]))
-  t.deepEqual(new SafeBuffer(new Uint8Array([1, 2, 3])), new Buffer(new Uint8Array([1, 2, 3])))
+  t.deepEqual(new SafeBuffer('hey'), new Buffer.from('hey'))
+  t.deepEqual(new SafeBuffer('hey', 'utf8'), new Buffer.from('hey', 'utf8'))
+  t.deepEqual(new SafeBuffer('686579', 'hex'), new Buffer.from('686579', 'hex'))
+  t.deepEqual(new SafeBuffer([1, 2, 3]), new Buffer.from([1, 2, 3]))
+  t.deepEqual(new SafeBuffer(new Uint8Array([1, 2, 3])), new Buffer.from(new Uint8Array([1, 2, 3])))
 
   t.equal(typeof SafeBuffer.isBuffer, 'function')
   t.equal(SafeBuffer.isBuffer(new SafeBuffer('hey')), true)
@@ -19,22 +19,22 @@
 })
 
 test('SafeBuffer.from(value) converts to a Buffer', function (t) {
-  t.deepEqual(SafeBuffer.from('hey'), new Buffer('hey'))
-  t.deepEqual(SafeBuffer.from('hey', 'utf8'), new Buffer('hey', 'utf8'))
-  t.deepEqual(SafeBuffer.from('686579', 'hex'), new Buffer('686579', 'hex'))
-  t.deepEqual(SafeBuffer.from([1, 2, 3]), new Buffer([1, 2, 3]))
-  t.deepEqual(SafeBuffer.from(new Uint8Array([1, 2, 3])), new Buffer(new Uint8Array([1, 2, 3])))
+  t.deepEqual(SafeBuffer.from('hey'), new Buffer.from('hey'))
+  t.deepEqual(SafeBuffer.from('hey', 'utf8'), new Buffer.from('hey', 'utf8'))
+  t.deepEqual(SafeBuffer.from('686579', 'hex'), new Buffer.from('686579', 'hex'))
+  t.deepEqual(SafeBuffer.from([1, 2, 3]), new Buffer.from([1, 2, 3]))
+  t.deepEqual(SafeBuffer.from(new Uint8Array([1, 2, 3])), new Buffer.from(new Uint8Array([1, 2, 3])))
 
   t.end()
 })
 
 test('SafeBuffer.alloc(number) returns zeroed-out memory', function (t) {
   for (var i = 0; i < 10; i++) {
-    var expected1 = new Buffer(1000)
+    var expected1 = new Buffer.alloc(1000)
     expected1.fill(0)
     t.deepEqual(SafeBuffer.alloc(1000), expected1)
 
-    var expected2 = new Buffer(1000 * 1000)
+    var expected2 = new Buffer.alloc(1000 * 1000)
     expected2.fill(0)
     t.deepEqual(SafeBuffer.alloc(1000 * 1000), expected2)
   }
